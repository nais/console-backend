// Code generated by mockery. DO NOT EDIT.

package resourceusage

import (
	context "context"

	gensql "github.com/nais/console-backend/internal/database/gensql"
	mock "github.com/stretchr/testify/mock"

	model "github.com/nais/console-backend/internal/graph/model"

	time "time"
)

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// ResourceUtilization provides a mock function with given fields: ctx, env, team, name, kind, start, end
func (_m *MockClient) ResourceUtilization(ctx context.Context, env string, team string, name string, kind gensql.Kind, start time.Time, end time.Time) (*model.ResourceUtilization, error) {
	ret := _m.Called(ctx, env, team, name, kind, start, end)

	var r0 *model.ResourceUtilization
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, gensql.Kind, time.Time, time.Time) (*model.ResourceUtilization, error)); ok {
		return rf(ctx, env, team, name, kind, start, end)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, gensql.Kind, time.Time, time.Time) *model.ResourceUtilization); ok {
		r0 = rf(ctx, env, team, name, kind, start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ResourceUtilization)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, gensql.Kind, time.Time, time.Time) error); ok {
		r1 = rf(ctx, env, team, name, kind, start, end)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_ResourceUtilization_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResourceUtilization'
type MockClient_ResourceUtilization_Call struct {
	*mock.Call
}

// ResourceUtilization is a helper method to define mock.On call
//   - ctx context.Context
//   - env string
//   - team string
//   - name string
//   - kind gensql.Kind
//   - start time.Time
//   - end time.Time
func (_e *MockClient_Expecter) ResourceUtilization(ctx interface{}, env interface{}, team interface{}, name interface{}, kind interface{}, start interface{}, end interface{}) *MockClient_ResourceUtilization_Call {
	return &MockClient_ResourceUtilization_Call{Call: _e.mock.On("ResourceUtilization", ctx, env, team, name, kind, start, end)}
}

func (_c *MockClient_ResourceUtilization_Call) Run(run func(ctx context.Context, env string, team string, name string, kind gensql.Kind, start time.Time, end time.Time)) *MockClient_ResourceUtilization_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(gensql.Kind), args[5].(time.Time), args[6].(time.Time))
	})
	return _c
}

func (_c *MockClient_ResourceUtilization_Call) Return(_a0 *model.ResourceUtilization, _a1 error) *MockClient_ResourceUtilization_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_ResourceUtilization_Call) RunAndReturn(run func(context.Context, string, string, string, gensql.Kind, time.Time, time.Time) (*model.ResourceUtilization, error)) *MockClient_ResourceUtilization_Call {
	_c.Call.Return(run)
	return _c
}

// ResourceUtilizationDateRange provides a mock function with given fields: ctx, env, team, name, kind
func (_m *MockClient) ResourceUtilizationDateRange(ctx context.Context, env string, team string, name string, kind gensql.Kind) (*model.ResourceUtilizationDateRange, error) {
	ret := _m.Called(ctx, env, team, name, kind)

	var r0 *model.ResourceUtilizationDateRange
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, gensql.Kind) (*model.ResourceUtilizationDateRange, error)); ok {
		return rf(ctx, env, team, name, kind)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, gensql.Kind) *model.ResourceUtilizationDateRange); ok {
		r0 = rf(ctx, env, team, name, kind)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ResourceUtilizationDateRange)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, gensql.Kind) error); ok {
		r1 = rf(ctx, env, team, name, kind)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_ResourceUtilizationDateRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResourceUtilizationDateRange'
type MockClient_ResourceUtilizationDateRange_Call struct {
	*mock.Call
}

// ResourceUtilizationDateRange is a helper method to define mock.On call
//   - ctx context.Context
//   - env string
//   - team string
//   - name string
//   - kind gensql.Kind
func (_e *MockClient_Expecter) ResourceUtilizationDateRange(ctx interface{}, env interface{}, team interface{}, name interface{}, kind interface{}) *MockClient_ResourceUtilizationDateRange_Call {
	return &MockClient_ResourceUtilizationDateRange_Call{Call: _e.mock.On("ResourceUtilizationDateRange", ctx, env, team, name, kind)}
}

func (_c *MockClient_ResourceUtilizationDateRange_Call) Run(run func(ctx context.Context, env string, team string, name string, kind gensql.Kind)) *MockClient_ResourceUtilizationDateRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(gensql.Kind))
	})
	return _c
}

func (_c *MockClient_ResourceUtilizationDateRange_Call) Return(_a0 *model.ResourceUtilizationDateRange, _a1 error) *MockClient_ResourceUtilizationDateRange_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_ResourceUtilizationDateRange_Call) RunAndReturn(run func(context.Context, string, string, string, gensql.Kind) (*model.ResourceUtilizationDateRange, error)) *MockClient_ResourceUtilizationDateRange_Call {
	_c.Call.Return(run)
	return _c
}

// ResourceUtilizationDateRangeForTeam provides a mock function with given fields: ctx, team
func (_m *MockClient) ResourceUtilizationDateRangeForTeam(ctx context.Context, team string) (*model.ResourceUtilizationDateRange, error) {
	ret := _m.Called(ctx, team)

	var r0 *model.ResourceUtilizationDateRange
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.ResourceUtilizationDateRange, error)); ok {
		return rf(ctx, team)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.ResourceUtilizationDateRange); ok {
		r0 = rf(ctx, team)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ResourceUtilizationDateRange)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, team)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_ResourceUtilizationDateRangeForTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResourceUtilizationDateRangeForTeam'
type MockClient_ResourceUtilizationDateRangeForTeam_Call struct {
	*mock.Call
}

// ResourceUtilizationDateRangeForTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - team string
func (_e *MockClient_Expecter) ResourceUtilizationDateRangeForTeam(ctx interface{}, team interface{}) *MockClient_ResourceUtilizationDateRangeForTeam_Call {
	return &MockClient_ResourceUtilizationDateRangeForTeam_Call{Call: _e.mock.On("ResourceUtilizationDateRangeForTeam", ctx, team)}
}

func (_c *MockClient_ResourceUtilizationDateRangeForTeam_Call) Run(run func(ctx context.Context, team string)) *MockClient_ResourceUtilizationDateRangeForTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClient_ResourceUtilizationDateRangeForTeam_Call) Return(_a0 *model.ResourceUtilizationDateRange, _a1 error) *MockClient_ResourceUtilizationDateRangeForTeam_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_ResourceUtilizationDateRangeForTeam_Call) RunAndReturn(run func(context.Context, string) (*model.ResourceUtilizationDateRange, error)) *MockClient_ResourceUtilizationDateRangeForTeam_Call {
	_c.Call.Return(run)
	return _c
}

// ResourceUtilizationForTeam provides a mock function with given fields: ctx, team, start, end
func (_m *MockClient) ResourceUtilizationForTeam(ctx context.Context, team string, start time.Time, end time.Time) ([]model.ResourceUtilizationForEnv, error) {
	ret := _m.Called(ctx, team, start, end)

	var r0 []model.ResourceUtilizationForEnv
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time, time.Time) ([]model.ResourceUtilizationForEnv, error)); ok {
		return rf(ctx, team, start, end)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time, time.Time) []model.ResourceUtilizationForEnv); ok {
		r0 = rf(ctx, team, start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ResourceUtilizationForEnv)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, time.Time, time.Time) error); ok {
		r1 = rf(ctx, team, start, end)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_ResourceUtilizationForTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResourceUtilizationForTeam'
type MockClient_ResourceUtilizationForTeam_Call struct {
	*mock.Call
}

// ResourceUtilizationForTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - team string
//   - start time.Time
//   - end time.Time
func (_e *MockClient_Expecter) ResourceUtilizationForTeam(ctx interface{}, team interface{}, start interface{}, end interface{}) *MockClient_ResourceUtilizationForTeam_Call {
	return &MockClient_ResourceUtilizationForTeam_Call{Call: _e.mock.On("ResourceUtilizationForTeam", ctx, team, start, end)}
}

func (_c *MockClient_ResourceUtilizationForTeam_Call) Run(run func(ctx context.Context, team string, start time.Time, end time.Time)) *MockClient_ResourceUtilizationForTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Time), args[3].(time.Time))
	})
	return _c
}

func (_c *MockClient_ResourceUtilizationForTeam_Call) Return(_a0 []model.ResourceUtilizationForEnv, _a1 error) *MockClient_ResourceUtilizationForTeam_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_ResourceUtilizationForTeam_Call) RunAndReturn(run func(context.Context, string, time.Time, time.Time) ([]model.ResourceUtilizationForEnv, error)) *MockClient_ResourceUtilizationForTeam_Call {
	_c.Call.Return(run)
	return _c
}

// ResourceUtilizationOverageCostForTeam provides a mock function with given fields: ctx, team, start, end
func (_m *MockClient) ResourceUtilizationOverageCostForTeam(ctx context.Context, team string, start time.Time, end time.Time) (*model.ResourceUtilizationOverageCostForTeam, error) {
	ret := _m.Called(ctx, team, start, end)

	var r0 *model.ResourceUtilizationOverageCostForTeam
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time, time.Time) (*model.ResourceUtilizationOverageCostForTeam, error)); ok {
		return rf(ctx, team, start, end)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time, time.Time) *model.ResourceUtilizationOverageCostForTeam); ok {
		r0 = rf(ctx, team, start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ResourceUtilizationOverageCostForTeam)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, time.Time, time.Time) error); ok {
		r1 = rf(ctx, team, start, end)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_ResourceUtilizationOverageCostForTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResourceUtilizationOverageCostForTeam'
type MockClient_ResourceUtilizationOverageCostForTeam_Call struct {
	*mock.Call
}

// ResourceUtilizationOverageCostForTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - team string
//   - start time.Time
//   - end time.Time
func (_e *MockClient_Expecter) ResourceUtilizationOverageCostForTeam(ctx interface{}, team interface{}, start interface{}, end interface{}) *MockClient_ResourceUtilizationOverageCostForTeam_Call {
	return &MockClient_ResourceUtilizationOverageCostForTeam_Call{Call: _e.mock.On("ResourceUtilizationOverageCostForTeam", ctx, team, start, end)}
}

func (_c *MockClient_ResourceUtilizationOverageCostForTeam_Call) Run(run func(ctx context.Context, team string, start time.Time, end time.Time)) *MockClient_ResourceUtilizationOverageCostForTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Time), args[3].(time.Time))
	})
	return _c
}

func (_c *MockClient_ResourceUtilizationOverageCostForTeam_Call) Return(_a0 *model.ResourceUtilizationOverageCostForTeam, _a1 error) *MockClient_ResourceUtilizationOverageCostForTeam_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_ResourceUtilizationOverageCostForTeam_Call) RunAndReturn(run func(context.Context, string, time.Time, time.Time) (*model.ResourceUtilizationOverageCostForTeam, error)) *MockClient_ResourceUtilizationOverageCostForTeam_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
