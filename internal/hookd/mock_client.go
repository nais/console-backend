// Code generated by mockery. DO NOT EDIT.

package hookd

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// ChangeDeployKey provides a mock function with given fields: ctx, team
func (_m *MockClient) ChangeDeployKey(ctx context.Context, team string) (*DeployKey, error) {
	ret := _m.Called(ctx, team)

	var r0 *DeployKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*DeployKey, error)); ok {
		return rf(ctx, team)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *DeployKey); ok {
		r0 = rf(ctx, team)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*DeployKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, team)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_ChangeDeployKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangeDeployKey'
type MockClient_ChangeDeployKey_Call struct {
	*mock.Call
}

// ChangeDeployKey is a helper method to define mock.On call
//   - ctx context.Context
//   - team string
func (_e *MockClient_Expecter) ChangeDeployKey(ctx interface{}, team interface{}) *MockClient_ChangeDeployKey_Call {
	return &MockClient_ChangeDeployKey_Call{Call: _e.mock.On("ChangeDeployKey", ctx, team)}
}

func (_c *MockClient_ChangeDeployKey_Call) Run(run func(ctx context.Context, team string)) *MockClient_ChangeDeployKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClient_ChangeDeployKey_Call) Return(_a0 *DeployKey, _a1 error) *MockClient_ChangeDeployKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_ChangeDeployKey_Call) RunAndReturn(run func(context.Context, string) (*DeployKey, error)) *MockClient_ChangeDeployKey_Call {
	_c.Call.Return(run)
	return _c
}

// DeployKey provides a mock function with given fields: ctx, team
func (_m *MockClient) DeployKey(ctx context.Context, team string) (*DeployKey, error) {
	ret := _m.Called(ctx, team)

	var r0 *DeployKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*DeployKey, error)); ok {
		return rf(ctx, team)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *DeployKey); ok {
		r0 = rf(ctx, team)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*DeployKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, team)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_DeployKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeployKey'
type MockClient_DeployKey_Call struct {
	*mock.Call
}

// DeployKey is a helper method to define mock.On call
//   - ctx context.Context
//   - team string
func (_e *MockClient_Expecter) DeployKey(ctx interface{}, team interface{}) *MockClient_DeployKey_Call {
	return &MockClient_DeployKey_Call{Call: _e.mock.On("DeployKey", ctx, team)}
}

func (_c *MockClient_DeployKey_Call) Run(run func(ctx context.Context, team string)) *MockClient_DeployKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClient_DeployKey_Call) Return(_a0 *DeployKey, _a1 error) *MockClient_DeployKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_DeployKey_Call) RunAndReturn(run func(context.Context, string) (*DeployKey, error)) *MockClient_DeployKey_Call {
	_c.Call.Return(run)
	return _c
}

// Deployments provides a mock function with given fields: ctx, opts
func (_m *MockClient) Deployments(ctx context.Context, opts ...RequestOption) ([]Deploy, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []Deploy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...RequestOption) ([]Deploy, error)); ok {
		return rf(ctx, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...RequestOption) []Deploy); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Deploy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...RequestOption) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_Deployments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Deployments'
type MockClient_Deployments_Call struct {
	*mock.Call
}

// Deployments is a helper method to define mock.On call
//   - ctx context.Context
//   - opts ...RequestOption
func (_e *MockClient_Expecter) Deployments(ctx interface{}, opts ...interface{}) *MockClient_Deployments_Call {
	return &MockClient_Deployments_Call{Call: _e.mock.On("Deployments",
		append([]interface{}{ctx}, opts...)...)}
}

func (_c *MockClient_Deployments_Call) Run(run func(ctx context.Context, opts ...RequestOption)) *MockClient_Deployments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]RequestOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(RequestOption)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_Deployments_Call) Return(_a0 []Deploy, _a1 error) *MockClient_Deployments_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_Deployments_Call) RunAndReturn(run func(context.Context, ...RequestOption) ([]Deploy, error)) *MockClient_Deployments_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
