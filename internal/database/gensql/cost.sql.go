// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: cost.sql

package gensql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const costLastDate = `-- name: CostLastDate :one
SELECT MAX(date)::DATE AS "date"
FROM cost
`

func (q *Queries) CostLastDate(ctx context.Context) (pgtype.Date, error) {
	row := q.db.QueryRow(ctx, costLastDate)
	var date pgtype.Date
	err := row.Scan(&date)
	return date, err
}

const getCost = `-- name: GetCost :many
SELECT id, env, team, app, cost_type, date, cost FROM cost
`

func (q *Queries) GetCost(ctx context.Context) ([]*Cost, error) {
	rows, err := q.db.Query(ctx, getCost)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Cost
	for rows.Next() {
		var i Cost
		if err := rows.Scan(
			&i.ID,
			&i.Env,
			&i.Team,
			&i.App,
			&i.CostType,
			&i.Date,
			&i.Cost,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
