// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: batch.go

package gensql

import (
	"context"
	"errors"

	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgtype"
)

var (
	ErrBatchAlreadyClosed = errors.New("batch already closed")
)

const costUpsert = `-- name: CostUpsert :batchexec
INSERT INTO cost (env, team, app, cost_type, date, daily_cost)
VALUES ($1, $2, $3, $4, $5, $6)
ON CONFLICT ON CONSTRAINT daily_cost_key DO
    UPDATE SET daily_cost = EXCLUDED.daily_cost
`

type CostUpsertBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type CostUpsertParams struct {
	Env       *string
	Team      *string
	App       *string
	CostType  string
	Date      pgtype.Date
	DailyCost float32
}

// CostUpsert will insert or update a cost record. If there is a conflict on the daily_cost_key constrant, the
// daily_cost column will be updated.
func (q *Queries) CostUpsert(ctx context.Context, arg []CostUpsertParams) *CostUpsertBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.Env,
			a.Team,
			a.App,
			a.CostType,
			a.Date,
			a.DailyCost,
		}
		batch.Queue(costUpsert, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &CostUpsertBatchResults{br, len(arg), false}
}

func (b *CostUpsertBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *CostUpsertBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}
