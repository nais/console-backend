package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"
	"fmt"
	"net/url"

	"github.com/nais/console-backend/internal/graph/model"
	dependencytrack "github.com/nais/dependencytrack/pkg/client"
)

// Instances is the resolver for the instances field.
func (r *appResolver) Instances(ctx context.Context, obj *model.App) ([]model.Instance, error) {
	instances, err := r.k8sClient.Instances(ctx, obj.GQLVars.Team, obj.Env.Name, obj.Name)
	if err != nil {
		return nil, fmt.Errorf("getting instances from Kubernetes: %w", err)
	}

	ret := make([]model.Instance, 0)
	for _, instance := range instances {
		ret = append(ret, *instance)
	}

	return ret, nil
}

// Manifest is the resolver for the manifest field.
func (r *appResolver) Manifest(ctx context.Context, obj *model.App) (string, error) {
	app, err := r.k8sClient.Manifest(ctx, obj.Name, obj.GQLVars.Team, obj.Env.Name)
	if err != nil {
		return "", fmt.Errorf("getting app manifest from Kubernetes: %w", err)
	}
	return app, err
}

// Team is the resolver for the team field.
func (r *appResolver) Team(ctx context.Context, obj *model.App) (*model.Team, error) {
	return r.teamsClient.GetTeam(ctx, obj.GQLVars.Team)
}

// DependencyTrack is the resolver for the dependencyTrack field.
func (r *appResolver) DependencyTrack(ctx context.Context, obj *model.App) (*model.DependencyTrack, error) {
	tag := url.QueryEscape(obj.Image)
	projects, err := r.dtrackClient.GetProjectsByTag(ctx, tag)
	if err != nil {
		return nil, fmt.Errorf("getting projects from DependencyTrack: %w", err)
	}
	if len(projects) == 0 {
		return nil, nil
	}

	var p *dependencytrack.Project
	for _, project := range projects {
		for _, t := range project.Tags {
			if t.Name == obj.Env.Name {
				p = project
				break
			}
		}
	}
	if p == nil {
		return nil, nil
	}

	// TODO: use salsa frontend url, not client baseurl
	findingsLink := fmt.Sprintf("%s/projects/%s/findings", r.dtrackClient.BaseURL(), p.Uuid)

	// https://salsa.nav.cloud.nais.io/projects/4381f963-e53b-4804-8084-7ede767f9006/findings

	v := make([]model.Vulnerability, 0)
	v = append(v, model.Vulnerability{
		ID:            "myid",
		Severity:      "HIGH",
		SeverityRank:  1,
		Name:          "CWE-123 something",
		ComponentPurl: "purl",
	})

	summary := model.VulnerabilitySummary{
		Total:      10,
		Critical:   1,
		High:       2,
		Medium:     3,
		Low:        4,
		Unassigned: 0,
	}

	d := &model.DependencyTrack{
		ProjectUUID:     p.Uuid,
		ProjectName:     p.Name,
		FindingsLink:    findingsLink,
		Vulnerabilities: v,
		Summary:         summary,
	}
	return d, nil
}

// App is the resolver for the app field.
func (r *queryResolver) App(ctx context.Context, name string, team string, env string) (*model.App, error) {
	app, err := r.k8sClient.App(ctx, name, team, env)
	if err != nil {
		return nil, fmt.Errorf("getting app from Kubernetes: %w", err)
	}
	return app, nil
}

// App returns AppResolver implementation.
func (r *Resolver) App() AppResolver { return &appResolver{r} }

type appResolver struct{ *Resolver }
