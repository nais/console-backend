package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.29

import (
	"context"
	"fmt"

	"github.com/nais/console-backend/internal/auth"
	"github.com/nais/console-backend/internal/console"
	"github.com/nais/console-backend/internal/graph/model"
)

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context) (*model.User, error) {
	email := auth.GetEmail(ctx)
	user, err := console.GetUser(ctx, email)
	if err != nil {
		return nil, fmt.Errorf("getting user from Console: %w", err)
	}
	return &model.User{
		ID:    user.ID.String(),
		Name:  user.Name,
		Email: email,
	}, nil
}

// Teams is the resolver for the teams field.
func (r *userResolver) Teams(ctx context.Context, obj *model.User, first *int, after *model.Cursor) (*model.TeamConnection, error) {
	teams, err := console.GetTeams(ctx, obj.Email)
	fmt.Printf("teams: %#v\n", teams)
	if err != nil {
		return nil, fmt.Errorf("getting teams from Console: %w", err)
	}

	return &model.TeamConnection{
		TotalCount: len(teams),
		Edges: func() []*model.TeamEdge {
			if after == nil {
				after = &model.Cursor{Offset: 0}
			}
			if *first > len(teams) {
				*first = len(teams)
			}

			var edges []*model.TeamEdge
			for i := after.Offset; i < *first+after.Offset; i++ {
				team := teams[i].Team
				edges = append(edges, &model.TeamEdge{
					Cursor: model.Cursor{Offset: i},
					Node: &model.Team{
						ID:          team.Slug,
						Name:        team.Slug,
						Description: &team.Purpose,
					},
				})
			}
			return edges
		}(),
		PageInfo: &model.PageInfo{
			HasNextPage:     len(teams) > *first+after.Offset,
			HasPreviousPage: after.Offset > 0,
			StartCursor:     &model.Cursor{Offset: 0},
			EndCursor:       &model.Cursor{Offset: len(teams) - 1},
		},
	}, nil
}

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

type userResolver struct{ *Resolver }
