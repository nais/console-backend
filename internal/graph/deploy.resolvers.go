package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.30

import (
	"context"
	"fmt"

	"github.com/nais/console-backend/internal/graph/model"
)

// Deployments is the resolver for the deployments field.
func (r *queryResolver) Deployments(ctx context.Context, first *int, after *model.Cursor) (*model.DeploymentConnection, error) {
	if first == nil {
		first = new(int)
		*first = 10
	}
	if after == nil {
		after = &model.Cursor{Offset: 0}
	}

	deploys, err := r.Hookd.Deployments(ctx, nil, nil)
	if err != nil {
		return nil, fmt.Errorf("getting deploys from Hookd: %w", err)
	}

	if *first > len(deploys) {
		*first = len(deploys)
	}

	e := deployEdges(deploys, *first, after.Offset)

	var startCursor *model.Cursor
	var endCursor *model.Cursor

	if len(e) > 0 {
		startCursor = &e[0].Cursor
		endCursor = &e[len(e)-1].Cursor
	}

	return &model.DeploymentConnection{
		TotalCount: len(deploys),
		Edges:      e,
		PageInfo: &model.PageInfo{
			StartCursor:     startCursor,
			EndCursor:       endCursor,
			HasNextPage:     len(deploys) > *first+after.Offset,
			HasPreviousPage: after.Offset > 0,
		},
	}, nil
}
