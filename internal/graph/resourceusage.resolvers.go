package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/nais/console-backend/internal/graph/model"
	prom "github.com/prometheus/common/model"
)

// DailyCPUUsageForApp is the resolver for the dailyCpuUsageForApp field.
func (r *queryResolver) DailyCPUUsageForApp(ctx context.Context, env string, team string, app string) ([]model.ResourceUsageValue, error) {
	values, err := r.resourceUsageClient.Query(ctx, env, team, app)
	if err != nil {
		return nil, err
	}

	usage := make([]model.ResourceUsageValue, 0)
	for _, val := range values.(prom.Matrix)[0].Values {
		usage = append(usage, model.ResourceUsageValue{
			Timestamp: val.Timestamp.Time(),
			Value:     float64(val.Value),
		})
	}

	return usage, nil
}
