package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"
	"time"

	"github.com/nais/console-backend/internal/graph/model"
	"github.com/nais/console-backend/internal/graph/scalar"
)

// CurrentResourceUtilizationForApp is the resolver for the currentResourceUtilizationForApp field.
func (r *queryResolver) CurrentResourceUtilizationForApp(ctx context.Context, env string, team string, app string) (*model.CurrentResourceUtilization, error) {
	return r.resourceUsageClient.CurrentResourceUtilizationForApp(ctx, env, team, app)
}

// CurrentResourceUtilizationForTeam is the resolver for the currentResourceUtilizationForTeam field.
func (r *queryResolver) CurrentResourceUtilizationForTeam(ctx context.Context, team string) (*model.CurrentResourceUtilization, error) {
	return r.resourceUsageClient.CurrentResourceUtilizationForTeam(ctx, team)
}

// ResourceUtilizationOverageForTeam is the resolver for the resourceUtilizationOverageForTeam field.
func (r *queryResolver) ResourceUtilizationOverageForTeam(ctx context.Context, team string) (*model.ResourceUtilizationOverageForTeam, error) {
	return r.resourceUsageClient.ResourceUtilizationOverageForTeam(ctx, team)
}

// ResourceUtilizationForTeam is the resolver for the resourceUtilizationForTeam field.
func (r *queryResolver) ResourceUtilizationForTeam(ctx context.Context, team string, from *scalar.Date, to *scalar.Date) ([]model.ResourceUtilizationForEnv, error) {
	now := time.Now().Truncate(24 * time.Hour).UTC()
	if to == nil {
		d := scalar.NewDate(now)
		to = &d
	}

	if from == nil {
		d := scalar.NewDate(now.AddDate(0, 0, -7))
		from = &d
	}

	return r.resourceUsageClient.ResourceUtilizationForTeam(ctx, team, *from, *to)
}

// ResourceUtilizationDateRangeForTeam is the resolver for the resourceUtilizationDateRangeForTeam field.
func (r *queryResolver) ResourceUtilizationDateRangeForTeam(ctx context.Context, team string) (*model.ResourceUtilizationDateRange, error) {
	return r.resourceUsageClient.ResourceUtilizationRangeForTeam(ctx, team)
}

// ResourceUtilizationDateRangeForApp is the resolver for the resourceUtilizationDateRangeForApp field.
func (r *queryResolver) ResourceUtilizationDateRangeForApp(ctx context.Context, env string, team string, app string) (*model.ResourceUtilizationDateRange, error) {
	return r.resourceUsageClient.ResourceUtilizationRangeForApp(ctx, env, team, app)
}

// ResourceUtilizationForApp is the resolver for the resourceUtilizationForApp field.
func (r *queryResolver) ResourceUtilizationForApp(ctx context.Context, env string, team string, app string, from *scalar.Date, to *scalar.Date) (*model.ResourceUtilizationForApp, error) {
	now := time.Now().Truncate(24 * time.Hour).UTC()
	if to == nil {
		d := scalar.NewDate(now)
		to = &d
	}

	if from == nil {
		d := scalar.NewDate(now.AddDate(0, 0, -7))
		from = &d
	}

	return r.resourceUsageClient.ResourceUtilizationForApp(ctx, env, team, app, *from, *to)
}
