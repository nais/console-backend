package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/nais/console-backend/internal/graph/model"
)

// DailyCPUUsageForApp is the resolver for the dailyCpuUsageForApp field.
func (r *queryResolver) DailyCPUUsageForApp(ctx context.Context, env string, team string, app string) ([]model.ResourceUsageValue, error) {
	return r.resourceUsageClient.DailyCpuUsageForApp(ctx, env, team, app)
}

// DailyMemoryUsageForApp is the resolver for the dailyMemoryUsageForApp field.
func (r *queryResolver) DailyMemoryUsageForApp(ctx context.Context, env string, team string, app string) ([]model.ResourceUsageValue, error) {
	return r.resourceUsageClient.DailyMemoryUsageForApp(ctx, env, team, app)
}

// DailyCPURequestForApp is the resolver for the dailyCpuRequestForApp field.
func (r *queryResolver) DailyCPURequestForApp(ctx context.Context, env string, team string, app string) ([]model.ResourceUsageValue, error) {
	return r.resourceUsageClient.DailyCpuRequestForApp(ctx, env, team, app)
}

// DailyMemoryRequestForApp is the resolver for the dailyMemoryRequestForApp field.
func (r *queryResolver) DailyMemoryRequestForApp(ctx context.Context, env string, team string, app string) ([]model.ResourceUsageValue, error) {
	return r.resourceUsageClient.DailyMemoryRequestForApp(ctx, env, team, app)
}
