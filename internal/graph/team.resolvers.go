package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"
	"fmt"
	"strings"

	"github.com/nais/console-backend/internal/auth"
	"github.com/nais/console-backend/internal/dependencytrack"
	"github.com/nais/console-backend/internal/graph/model"
	"github.com/nais/console-backend/internal/graph/model/vulnerabilities"
	"github.com/nais/console-backend/internal/graph/scalar"
	"github.com/nais/console-backend/internal/hookd"
)

// ChangeDeployKey is the resolver for the changeDeployKey field.
func (r *mutationResolver) ChangeDeployKey(ctx context.Context, team string) (*model.DeploymentKey, error) {
	if !r.hasAccess(ctx, team) {
		return nil, fmt.Errorf("access denied")
	}

	deployKey, err := r.hookdClient.ChangeDeployKey(ctx, team)
	if err != nil {
		return nil, fmt.Errorf("changing deploy key in Hookd: %w", err)
	}
	return &model.DeploymentKey{
		ID:      scalar.DeployKeyIdent(team),
		Key:     deployKey.Key,
		Created: deployKey.Created,
		Expires: deployKey.Expires,
	}, nil
}

// Status is the resolver for the status field.
func (r *teamResolver) Status(ctx context.Context, obj *model.Team) (*model.TeamStatus, error) {
	apps, err := r.k8sClient.Apps(ctx, obj.Slug)
	if err != nil {
		return nil, fmt.Errorf("getting apps from Kubernetes: %w", err)
	}

	jobs, err := r.k8sClient.NaisJobs(ctx, obj.Slug)
	if err != nil {
		return nil, fmt.Errorf("getting naisjobs from Kubernetes: %w", err)
	}

	failingApps := 0
	for _, app := range apps {
		if app.AppState.State == model.StateFailing {
			failingApps++
		}
	}
	failingJobs := 0
	for _, job := range jobs {
		if job.JobState.State == model.StateFailing {
			failingJobs++
		}
	}

	return &model.TeamStatus{
		Apps: model.AppsStatus{
			Total:   len(apps),
			Failing: failingApps,
		},
		Jobs: model.JobsStatus{
			Total:   len(jobs),
			Failing: failingJobs,
		},
	}, nil
}

// Apps is the resolver for the apps field.
func (r *teamResolver) Apps(ctx context.Context, obj *model.Team, offset *int, limit *int, orderBy *model.OrderBy) (*model.AppList, error) {
	apps, err := r.k8sClient.Apps(ctx, obj.Slug)
	if err != nil {
		return nil, fmt.Errorf("getting apps from Kubernetes: %w", err)
	}
	if orderBy != nil {
		switch orderBy.Field {
		case "NAME":
			model.SortWith(apps, func(a, b *model.App) bool {
				return model.Compare(a.Name, b.Name, orderBy.Direction)
			})
		case "ENV":
			model.SortWith(apps, func(a, b *model.App) bool {
				return model.Compare(a.Env.Name, b.Env.Name, orderBy.Direction)
			})
		case "DEPLOYED":
			model.SortWith(apps, func(a, b *model.App) bool {
				if a.DeployInfo.Timestamp == nil {
					return false
				}
				if b.DeployInfo.Timestamp == nil {
					return true
				}
				return model.Compare(b.DeployInfo.Timestamp.UnixMilli(), a.DeployInfo.Timestamp.UnixMilli(), orderBy.Direction)
			})
		case "STATUS":
			model.SortWith(apps, func(a, b *model.App) bool {
				sortOrder := []model.State{model.StateFailing, model.StateNotnais, model.StateUnknown, model.StateNais}
				aIndex := -1
				bIndex := -1
				for i, s := range sortOrder {
					if a.AppState.State == s {
						aIndex = i
					}
					if b.AppState.State == s {
						bIndex = i
					}
				}
				if aIndex == -1 {
					return false
				}
				if bIndex == -1 {
					return true
				}
				if orderBy.Direction == model.SortOrderAsc {
					return aIndex < bIndex
				}
				return aIndex > bIndex
			})
		}
	}
	pagination := model.NewPagination(offset, limit)
	apps, pageInfo := model.PaginatedSlice(apps, pagination)
	for _, app := range apps {
		app.GQLVars = model.AppGQLVars{Team: obj.Slug}
	}

	return &model.AppList{
		Nodes:    apps,
		PageInfo: pageInfo,
	}, nil
}

// DeployKey is the resolver for the deployKey field.
func (r *teamResolver) DeployKey(ctx context.Context, obj *model.Team) (*model.DeploymentKey, error) {
	if !r.hasAccess(ctx, obj.Slug) {
		return nil, fmt.Errorf("access denied")
	}

	key, err := r.hookdClient.DeployKey(ctx, obj.Slug)
	if err != nil {
		return nil, fmt.Errorf("getting deploy key from Hookd: %w", err)
	}

	return &model.DeploymentKey{
		ID:      scalar.DeployKeyIdent(obj.Slug),
		Key:     key.Key,
		Created: key.Created,
		Expires: key.Expires,
	}, nil
}

// Naisjobs is the resolver for the naisjobs field.
func (r *teamResolver) Naisjobs(ctx context.Context, obj *model.Team, offset *int, limit *int, orderBy *model.OrderBy) (*model.NaisJobList, error) {
	naisjobs, err := r.k8sClient.NaisJobs(ctx, obj.Slug)
	if err != nil {
		return nil, fmt.Errorf("getting naisjobs from Kubernetes: %w", err)
	}

	if orderBy != nil {
		switch orderBy.Field {
		case "NAME":
			model.SortWith(naisjobs, func(a, b *model.NaisJob) bool {
				return model.Compare(a.Name, b.Name, orderBy.Direction)
			})
		case "ENV":
			model.SortWith(naisjobs, func(a, b *model.NaisJob) bool {
				return model.Compare(a.Env.Name, b.Env.Name, orderBy.Direction)
			})
		case "DEPLOYED":
			model.SortWith(naisjobs, func(a, b *model.NaisJob) bool {
				if a.DeployInfo.Timestamp == nil {
					return false
				}
				if b.DeployInfo.Timestamp == nil {
					return true
				}
				return model.Compare(b.DeployInfo.Timestamp.UnixMilli(), a.DeployInfo.Timestamp.UnixMilli(), orderBy.Direction)
			})
		case "STATUS":
			model.SortWith(naisjobs, func(a, b *model.NaisJob) bool {
				sortOrder := []model.State{model.StateFailing, model.StateNotnais, model.StateUnknown, model.StateNais}
				aIndex := -1
				bIndex := -1
				for i, s := range sortOrder {
					if a.JobState.State == s {
						aIndex = i
					}
					if b.JobState.State == s {
						bIndex = i
					}
				}
				if aIndex == -1 {
					return false
				}
				if bIndex == -1 {
					return true
				}
				if orderBy.Direction == model.SortOrderAsc {
					return aIndex < bIndex
				}
				return aIndex > bIndex
			})
		}
	}

	pagination := model.NewPagination(offset, limit)
	jobs, pageInfo := model.PaginatedSlice(naisjobs, pagination)
	for _, job := range jobs {
		job.GQLVars = model.NaisJobGQLVars{Team: obj.Slug}
	}

	return &model.NaisJobList{
		Nodes:    jobs,
		PageInfo: pageInfo,
	}, nil
}

// Deployments is the resolver for the deployments field.
func (r *teamResolver) Deployments(ctx context.Context, obj *model.Team, offset *int, limit *int) (*model.DeploymentList, error) {
	pagination := model.NewPagination(offset, limit)

	deploys, err := r.hookdClient.Deployments(ctx, hookd.WithTeam(obj.Slug), hookd.WithLimit(pagination.Limit))
	if err != nil {
		return nil, fmt.Errorf("getting deploys from Hookd: %w", err)
	}

	return &model.DeploymentList{
		Nodes: deployToModel(deploys),
		PageInfo: model.PageInfo{
			HasNextPage:     len(deploys) >= pagination.Limit,
			HasPreviousPage: pagination.Offset > 0,
			TotalCount:      0,
		},
	}, nil
}

// ViewerIsMember is the resolver for the viewerIsMember field.
func (r *teamResolver) ViewerIsMember(ctx context.Context, obj *model.Team) (bool, error) {
	email, err := auth.GetEmail(ctx)
	if err != nil {
		return false, fmt.Errorf("getting email from context: %w", err)
	}

	members, err := r.teamsClient.GetTeamMembers(ctx, obj.Slug)
	if err != nil {
		return false, fmt.Errorf("getting teams from Teams: %w", err)
	}

	for _, m := range members {
		if strings.EqualFold(m.User.Email, email) {
			if m.Role == "OWNER" || m.Role == "MEMBER" {
				return true, nil
			}
		}
	}

	return false, nil
}

// ViewerIsAdmin is the resolver for the viewerIsAdmin field.
func (r *teamResolver) ViewerIsAdmin(ctx context.Context, obj *model.Team) (bool, error) {
	email, err := auth.GetEmail(ctx)
	if err != nil {
		return false, fmt.Errorf("getting email from context: %w", err)
	}

	members, err := r.teamsClient.GetTeamMembers(ctx, obj.Slug)
	if err != nil {
		return false, fmt.Errorf("getting members from Teams: %w", err)
	}

	for _, m := range members {
		if strings.EqualFold(m.User.Email, email) {
			if m.Role == "OWNER" {
				return true, nil
			}
		}
	}
	return false, nil
}

// Vulnerabilities is the resolver for the vulnerabilities field.
func (r *teamResolver) Vulnerabilities(ctx context.Context, obj *model.Team, offset *int, limit *int, orderBy *model.OrderBy) (*model.VulnerabilityList, error) {
	apps, err := r.k8sClient.Apps(ctx, obj.Slug)
	if err != nil {
		return nil, fmt.Errorf("getting apps from Kubernetes: %w", err)
	}

	instances := make([]*dependencytrack.AppInstance, 0)
	for _, app := range apps {
		instances = append(instances, &dependencytrack.AppInstance{
			Env:   app.Env.Name,
			App:   app.Name,
			Image: app.Image,
			Team:  obj.Slug,
		})
	}

	nodes, err := r.dependencyTrackClient.GetVulnerabilities(ctx, instances)
	if err != nil {
		return nil, fmt.Errorf("getting vulnerabilities from DependencyTrack: %w", err)
	}

	if orderBy != nil {
		vulnerabilities.Sort(nodes, orderBy.Field, orderBy.Direction)
	}

	pagination := model.NewPagination(offset, limit)
	v, pi := model.PaginatedSlice(nodes, pagination)

	return &model.VulnerabilityList{
		Nodes:    v,
		PageInfo: pi,
	}, nil
}

// VulnerabilitiesSummary is the resolver for the vulnerabilitiesSummary field.
func (r *teamResolver) VulnerabilitiesSummary(ctx context.Context, obj *model.Team) (*model.VulnerabilitySummary, error) {
	apps, err := r.k8sClient.Apps(ctx, obj.Slug)
	if err != nil {
		return nil, fmt.Errorf("getting apps from Kubernetes: %w", err)
	}

	instances := make([]*dependencytrack.AppInstance, 0)
	for _, app := range apps {
		instances = append(instances, &dependencytrack.AppInstance{
			Env:   app.Env.Name,
			App:   app.Name,
			Image: app.Image,
			Team:  obj.Slug,
		})
	}

	nodes, err := r.dependencyTrackClient.GetVulnerabilities(ctx, instances)
	if err != nil {
		return nil, fmt.Errorf("getting vulnerabilities from DependencyTrack: %w", err)
	}

	retVal := &model.VulnerabilitySummary{}
	for _, n := range nodes {
		if n.Summary == nil {
			continue
		}
		if n.Summary.Critical > 0 {
			retVal.Critical += n.Summary.Critical
		}
		if n.Summary.High > 0 {
			retVal.High += n.Summary.High
		}
		if n.Summary.Medium > 0 {
			retVal.Medium += n.Summary.Medium
		}
		if n.Summary.Low > 0 {
			retVal.Low += n.Summary.Low
		}
		if n.Summary.Unassigned > 0 {
			retVal.Unassigned += n.Summary.Unassigned
		}
		if n.Summary.RiskScore > 0 {
			retVal.RiskScore += n.Summary.RiskScore
		}
		if n.Summary.Total > 0 {
			retVal.Total += n.Summary.Total
		}
	}
	return retVal, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Team returns TeamResolver implementation.
func (r *Resolver) Team() TeamResolver { return &teamResolver{r} }

type mutationResolver struct{ *Resolver }
type teamResolver struct{ *Resolver }
