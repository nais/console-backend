package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"

	"github.com/nais/console-backend/internal/graph/model"
)

// History is the resolver for the history field.
func (r *deployInfoResolver) History(ctx context.Context, obj *model.DeployInfo, first *int, last *int, after *model.Cursor, before *model.Cursor) (model.DeploymentResponse, error) {
	name := obj.GQLVars.App
	kind := "Application"
	if obj.GQLVars.Job != "" {
		kind = "Naisjob"
		name = obj.GQLVars.Job
	}

	deploys, err := r.Hookd.DeploymentsByKind(ctx, name, obj.GQLVars.Team, obj.GQLVars.Env, kind)
	if err != nil {
		return nil, fmt.Errorf("getting deploys from Hookd: %w", err)
	}
	pagination := model.NewPagination(first, last, after, before)
	e := deployEdges(deploys, pagination)

	var startCursor *model.Cursor
	var endCursor *model.Cursor
	if len(e) > 0 {
		startCursor = &e[0].Cursor
		endCursor = &e[len(e)-1].Cursor
	}

	hasNext := len(deploys) > pagination.First()+pagination.After().Offset+1
	hasPrevious := pagination.After().Offset > 0

	if pagination.Before() != nil && startCursor != nil {
		hasNext = true
		hasPrevious = startCursor.Offset > 0
	}

	return &model.DeploymentConnection{
		Edges: e,
		PageInfo: &model.PageInfo{
			StartCursor:     startCursor,
			EndCursor:       endCursor,
			HasNextPage:     hasNext,
			HasPreviousPage: hasPrevious,
		},
	}, nil
}

// DeployInfo returns DeployInfoResolver implementation.
func (r *Resolver) DeployInfo() DeployInfoResolver { return &deployInfoResolver{r} }

type deployInfoResolver struct{ *Resolver }
