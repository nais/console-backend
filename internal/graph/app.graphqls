type AppConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [AppEdge!]!
}
type AppEdge {
  cursor: Cursor!
  node: App!
}

type Instance implements Node {
  id: ID!
  name: String!
  status: String!
  image: String!
  restarts: Int!
  created: Time!
}

type Port {
  port: Int!
}

type External {
  host: String!
  ports: [Port!]!
}

type Rule {
  application: String!
  namespace: String!
}

type Inbound {
  rules: [Rule!]!
}

type Outbound {
  rules: [Rule!]!
  external: [External!]!
}

type AccessPolicy {
  inbound: Inbound!
  outbound: Outbound!
}

type Limits {
  cpu: String!
  memory: String!
}

type Requests {
  cpu: String!
  memory: String!
}

type Resources {
  limits: Limits!
  requests: Requests!
}

type App implements Node {
  id: ID!
  name: String!
  image: String!
  deployed: Time
  env: Env!
  ingresses: [String!]!
  instances: [Instance!]!
  accessPolicy: AccessPolicy!
  resources: Resources!
  deploys(first: Int, after: Cursor): DeploymentConnection!

  #  authz: [Authz!]!
  #  autoScaling: AutoScaling!
  #  manifest: Spec!
  #  networking: [Networking!]!
  #  storage: [Storage!]!
  #  variables: [Variable!]!
}

extend type Query {
  app(name: String!, team: String!, env: String!): App!
}
