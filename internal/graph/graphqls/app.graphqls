extend type Query {
    "Get an app by name, team and env."
    app(
        "The name of the application."
        name: String!,

        "The name of the team who owns the application."
        team: String!,

        "The environment the application is deployed to."
        env: String!
    ): App!
}

type App implements Node {
    id: ID!
    name: String!
    image: String!
    deployInfo: DeployInfo!
    env: Env!
    ingresses: [String!]!
    instances: [Instance!]! @goField(forceResolver: true)
    accessPolicy: AccessPolicy!
    resources: Resources!
    autoScaling: AutoScaling!
    storage: [Storage!]!
    variables: [Variable!]!
    authz: [Authz!]!
    manifest: String! @goField(forceResolver: true)
    team: Team! @goField(forceResolver: true)
    appState: AppState!
    vulnerabilities: VulnerabilitiesNode @goField(forceResolver: true)
}

type AppConnection implements Connection {
    totalCount: Int!
    pageInfo: PageInfo!
    edges: [AppEdge!]!
}

type AppEdge implements Edge {
    cursor: Cursor!
    node: App!
}

type AppState {
    state: State!
    errors: [StateError!]!
}

type Variable {
    name: String!
    value: String!
}

type AutoScaling {
    disabled: Boolean!
    """
    CPU threshold in percent
    """
    cpuThreshold: Int!
    max: Int!
    min: Int!
}

type DeprecatedRegistryError implements StateError {
    revision: String!
    level: ErrorLevel!
    registry: String!
    repository: String!
    name: String!
    tag: String!
}

type DeprecatedIngressError implements StateError {
    revision: String!
    level: ErrorLevel!
    ingress: String!
}

type NoRunningInstancesError implements StateError {
    revision: String!
    level: ErrorLevel!
}

type NewInstancesFailingError implements StateError {
    revision: String!
    level: ErrorLevel!
    failingInstances: [String!]!
}

type InvalidNaisYamlError implements StateError {
    revision: String!
    level: ErrorLevel!
    detail: String!
}

type InboundAccessError implements StateError {
    revision: String!
    level: ErrorLevel!
    rule: Rule!
}

type OutboundAccessError implements StateError {
    revision: String!
    level: ErrorLevel!
    rule: Rule!
}

type Instance implements Node {
    id: ID!
    name: String!
    state: InstanceState!
    message: String!
    image: String!
    restarts: Int!
    created: Time!
}

interface StateError {
    revision: String!
    level: ErrorLevel!
}

enum InstanceState {
    RUNNING
    FAILING
    UNKNOWN
}

enum ErrorLevel {
    INFO
    WARNING
    ERROR
}

enum State {
    NAIS
    NOTNAIS
    FAILING
    UNKNOWN
}

