extend type Query {
    "Get costs."
    cost(filter: CostFilter!): Cost!

    "Get monthly costs."
    monthlyCost(filter: MonthlyCostFilter!): MonthlyCost!

    envCost(filter: EnvCostFilter!): [EnvCost!]!
}

input EnvCostFilter {
    team: String!
    from: Date!
    to: Date!
}

type EnvCost {
    env: String!
    apps: [AppCost!]!
}

type AppCost {
    app: String!
    sum: Float!
    cost: [CostEntry!]!
}


"Monthly cost filter input type."
input MonthlyCostFilter {
    "The name of the team to get costs for."
    team: String!

    "The name of the application to get costs for."
    app: String!

    "The name of the environment to get costs for."
    env: String!
}

"Cost filter input type."
input CostFilter {
    "Start date for the cost series, inclusive."
    from: Date!

    "End date for cost series, inclusive."
    to: Date!

    "The name of the team to get costs for."
    team: String!

    "The name of the application to get costs for."
    app: String!

    "The name of the environment to get costs for."
    env: String!
}

"Montly cost type."
type MonthlyCost {
    "Sum for all months in the series."
    sum: Float!

    "A list of monthly cost entries."
    cost: [CostEntry!]!
}

"Cost type."
type Cost {
    "The start date for the cost data."
    from: Date!

    "The end date for the cost data."
    to: Date!

    "The sum of all costs in the cost series in euros."
    sum: Float! @goField(forceResolver: true)

    "The cost series."
    series: [CostSeries!]!
}

"Cost series type."
type CostSeries {
    "The type of cost."
    costType: String!

    "The name of the application."
    app: String!

    "The name of the environment."
    env: String!

    "The name of the team."
    team: String!

    "The sum of all daily costs in the series for this cost type in euros."
    sum: Float! @goField(forceResolver: true)

    "The cost data."
    data: [CostEntry!]!
}

"Cost entry type."
type CostEntry {
    "The date for the entry."
    date: Date!

    "The cost in euros."
    cost: Float!
}
