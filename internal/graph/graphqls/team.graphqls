extend type Query {
  "Get a list of NAIS-teams, in alphabetical order."
  teams(
    "Returns the first n entries from the list."
    first: Int

    "Returns the last n entries from the list."
    last: Int

    "Get entries after the cursor."
    after: Cursor

    "Get entries before the cursor."
    before: Cursor
  ): TeamConnection!

  "Get a specific NAIS-team by the team name."
  team("The name of the NAIS-team to get." name: String!): Team!
}

extend type Mutation {
  """
  Create a new team

  The user creating the team will be granted team ownership, unless the user is a service account, in which case the
  team will not get an initial owner. To add one or more owners to the team, refer to the `addTeamOwners` mutation.

  The new team will be returned on success.
  """
  createTeam(
    "Input for creation of the new team."
    input: CreateTeamInput!
  ): Team!

  """
  Update an existing team

  This mutation can be used to update the team purpose. It is not possible to update the team name.

  The updated team will be returned on success.
  """
  updateTeam(
    "Name of the team to update."
    name: String!

    "Input for updating the team."
    input: UpdateTeamInput!
  ): Team!

  "Update the deploy key of a team. Returns the updated deploy key."
  changeDeployKey(
    "The name of the team to update the deploy key for."
    team: String!
  ): DeploymentKey!
}

"Team connection type."
type TeamConnection implements Connection {
  "The total count of available teams."
  totalCount: Int!

  "Pagination information."
  pageInfo: PageInfo!

  "A list of team edges."
  edges: [TeamEdge!]!
}

"Team edge type."
type TeamEdge implements Edge {
  "A cursor for use in pagination."
  cursor: Cursor!

  "The team at the end of the edge."
  node: Team!
}

"Team member connection type."
type TeamMemberConnection implements Connection {
  "The total count of available team members."
  totalCount: Int!

  "Pagination information."
  pageInfo: PageInfo!

  "A list of team member edges."
  edges: [TeamMemberEdge!]!
}

"Team member edge type."
type TeamMemberEdge implements Edge {
  "A cursor for use in pagination."
  cursor: Cursor!

  "The team member at the end of the edge."
  node: TeamMember!
}

"Team type."
type Team implements Node {
  "The unique identifier of the team."
  id: ID!

  "The name of the team."
  name: String!

  "The description of the team."
  description: String!

  "The status of the team."
  status: TeamStatus! @goField(forceResolver: true)

  "Team members."
  members(
    "Returns the first n entries from the list."
    first: Int

    "Returns the last n entries from the list."
    last: Int

    "Get entries after the cursor."
    after: Cursor

    "Get entries before the cursor."
    before: Cursor
  ): TeamMemberConnection! @goField(forceResolver: true)

  "The NAIS applications owned by the team."
  apps(
    "Returns the first n entries from the list."
    first: Int

    "Returns the last n entries from the list."
    last: Int

    "Get entries after the cursor."
    after: Cursor

    "Get entries before the cursor."
    before: Cursor

    "Order apps by"
    orderBy: OrderBy
  ): AppConnection! @goField(forceResolver: true)

  "The NAIS jobs owned by the team."
  naisjobs(
    "Returns the first n entries from the list."
    first: Int

    "Returns the last n entries from the list."
    last: Int

    "Get entries after the cursor."
    after: Cursor

    "Get entries before the cursor."
    before: Cursor

    "Order naisjobs by"
    orderBy: OrderBy
  ): NaisJobConnection! @goField(forceResolver: true)

  "The GitHub repositories that the team has access to."
  githubRepositories(
    "Returns the first n entries from the list."
    first: Int

    "Get entries after the cursor."
    after: Cursor
  ): GithubRepositoryConnection! @goField(forceResolver: true)

  "The main Slack channel for the team."
  slackChannel: String!

  "Slack alerts channels for the team."
  slackAlertsChannels: [SlackAlertsChannel!]!

  gcpProjects: [GcpProject!]!

  "The deployments of the team's applications."
  deployments(
    "Returns the first n entries from the list."
    first: Int

    "Returns the last n entries from the list."
    last: Int

    "Get entries after the cursor."
    after: Cursor

    "Get entries before the cursor."
    before: Cursor

    "Limit the number of entries returned."
    limit: Int
  ): DeploymentConnection! @goField(forceResolver: true)

  "The deploy key of the team."
  deployKey: DeploymentKey! @goField(forceResolver: true)

  "Whether or not the viewer is a member of the team."
  viewerIsMember: Boolean! @goField(forceResolver: true)

  "Whether or not the viewer is an administrator of the team."
  viewerIsAdmin: Boolean! @goField(forceResolver: true)

  "The vulnerabilities for the team's applications."
  vulnerabilities(
    "Returns the first n entries from the list."
    first: Int

    "Returns the last n entries from the list."
    last: Int

    "Get entries after the cursor."
    after: Cursor

    "Get entries before the cursor."
    before: Cursor

    "Order apps by"
    orderBy: OrderBy
  ): VulnerabilitiesConnection! @goField(forceResolver: true)

  vulnerabilitiesSummary: VulnerabilitySummary! @goField(forceResolver: true)
}

"Team status."
type TeamStatus {
  apps: AppsStatus!
  jobs: JobsStatus!
}

"Team status for apps."
type AppsStatus {
  total: Int!
  failing: Int!
}

"Team status for jobs."
type JobsStatus {
  total: Int!
  failing: Int!
}

"Deployment key type."
type DeploymentKey implements Node {
  "The unique identifier of the deployment key."
  id: ID!

  "The actual key."
  key: String!

  "The date the deployment key was created."
  created: Time!

  "The date the deployment key expires."
  expires: Time!
}

"GitHub repository connection type."
type GithubRepositoryConnection implements Connection {
  "The total count of available GitHub repositories."
  totalCount: Int!

  "Pagination information."
  pageInfo: PageInfo!

  "A list of GitHub repository edges."
  edges: [GithubRepositoryEdge!]!
}

"GitHub repository edge type."
type GithubRepositoryEdge implements Edge {
  "A cursor for use in pagination."
  cursor: Cursor!

  "The GitHub repository at the end of the edge."
  node: GithubRepository!
}

"GitHub repository type."
type GithubRepository {
  "The name of the GitHub repository."
  name: String!
}

"Slack alerts channel type."
type SlackAlertsChannel {
  "The name of the Slack alerts channel."
  name: String!

  "The environment for the Slack alerts channel."
  env: String!
}

"GCP project type."
type GcpProject {
  "The unique identifier of the GCP project."
  id: String!
  "The name of the GCP project."
  name: String!
  "The environment for the GCP project."
  environment: String!
}

"Team member type."
type TeamMember implements Node {
  "The unique identifier of the team member."
  id: ID!

  "The name of the team member."
  name: String!

  "The email of the team member."
  email: String!

  "The role of the team member."
  role: TeamRole!
}

"Team member roles."
enum TeamRole {
  "A regular team member."
  MEMBER

  "A team owner/administrator."
  OWNER
}

"Input for creating a new team."
input CreateTeamInput {
  "Team slug. After creation, this value can not be changed."
  name: String!

  "Team purpose."
  description: String!

  "Specify the Slack channel for the team."
  slackChannel: String!
}

"Input for updating an existing team."
input UpdateTeamInput {
  "Specify team description to update the existing value."
  description: String

  "Specify the Slack channel to update the existing value."
  slackChannel: String

  "A list of Slack channels for NAIS alerts."
  slackAlertsChannels: [SlackAlertsChannelInput!]
}

"Slack alerts channel input."
input SlackAlertsChannelInput {
  "The environment for the alerts sent to the channel."
  environment: String!

  "The name of the Slack channel."
  channelName: String
}
