package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"
	"fmt"

	"github.com/nais/console-backend/internal/graph/model"
	"github.com/nais/console-backend/internal/graph/scalar"
)

// FindAppByID is the resolver for the findAppByID field.
func (r *entityResolver) FindAppByID(ctx context.Context, id scalar.Ident) (*model.App, error) {
	panic(fmt.Errorf("not implemented: FindAppByID - findAppByID"))
}

// FindDailyCostByID is the resolver for the findDailyCostByID field.
func (r *entityResolver) FindDailyCostByID(ctx context.Context, id scalar.Ident) (*model.DailyCost, error) {
	panic(fmt.Errorf("not implemented: FindDailyCostByID - findDailyCostByID"))
}

// FindTeamBySlug is the resolver for the findTeamBySlug field.
func (r *entityResolver) FindTeamBySlug(ctx context.Context, slug string) (*model.Team, error) {
	return &model.Team{
		Slug: slug,
		Name: slug,
	}, nil
}

// FindUserByID is the resolver for the findUserByID field.
func (r *entityResolver) FindUserByID(ctx context.Context, id scalar.Ident) (*model.User, error) {
	panic(fmt.Errorf("not implemented: FindUserByID - findUserByID"))
}

// Entity returns EntityResolver implementation.
func (r *Resolver) Entity() EntityResolver { return &entityResolver{r} }

type entityResolver struct{ *Resolver }
