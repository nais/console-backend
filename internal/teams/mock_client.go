// Code generated by mockery. DO NOT EDIT.

package teams

import (
	context "context"

	model "github.com/nais/console-backend/internal/graph/model"
	mock "github.com/stretchr/testify/mock"

	search "github.com/nais/console-backend/internal/search"
)

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// GetGithubRepositories provides a mock function with given fields: ctx, teamSlug
func (_m *MockClient) GetGithubRepositories(ctx context.Context, teamSlug string) ([]GitHubRepository, error) {
	ret := _m.Called(ctx, teamSlug)

	var r0 []GitHubRepository
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]GitHubRepository, error)); ok {
		return rf(ctx, teamSlug)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []GitHubRepository); ok {
		r0 = rf(ctx, teamSlug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]GitHubRepository)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, teamSlug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetGithubRepositories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGithubRepositories'
type MockClient_GetGithubRepositories_Call struct {
	*mock.Call
}

// GetGithubRepositories is a helper method to define mock.On call
//   - ctx context.Context
//   - teamSlug string
func (_e *MockClient_Expecter) GetGithubRepositories(ctx interface{}, teamSlug interface{}) *MockClient_GetGithubRepositories_Call {
	return &MockClient_GetGithubRepositories_Call{Call: _e.mock.On("GetGithubRepositories", ctx, teamSlug)}
}

func (_c *MockClient_GetGithubRepositories_Call) Run(run func(ctx context.Context, teamSlug string)) *MockClient_GetGithubRepositories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClient_GetGithubRepositories_Call) Return(_a0 []GitHubRepository, _a1 error) *MockClient_GetGithubRepositories_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_GetGithubRepositories_Call) RunAndReturn(run func(context.Context, string) ([]GitHubRepository, error)) *MockClient_GetGithubRepositories_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeam provides a mock function with given fields: ctx, teamSlug
func (_m *MockClient) GetTeam(ctx context.Context, teamSlug string) (*model.Team, error) {
	ret := _m.Called(ctx, teamSlug)

	var r0 *model.Team
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Team, error)); ok {
		return rf(ctx, teamSlug)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Team); ok {
		r0 = rf(ctx, teamSlug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Team)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, teamSlug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeam'
type MockClient_GetTeam_Call struct {
	*mock.Call
}

// GetTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - teamSlug string
func (_e *MockClient_Expecter) GetTeam(ctx interface{}, teamSlug interface{}) *MockClient_GetTeam_Call {
	return &MockClient_GetTeam_Call{Call: _e.mock.On("GetTeam", ctx, teamSlug)}
}

func (_c *MockClient_GetTeam_Call) Run(run func(ctx context.Context, teamSlug string)) *MockClient_GetTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClient_GetTeam_Call) Return(_a0 *model.Team, _a1 error) *MockClient_GetTeam_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_GetTeam_Call) RunAndReturn(run func(context.Context, string) (*model.Team, error)) *MockClient_GetTeam_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeamMembers provides a mock function with given fields: ctx, teamSlug
func (_m *MockClient) GetTeamMembers(ctx context.Context, teamSlug string) ([]Member, error) {
	ret := _m.Called(ctx, teamSlug)

	var r0 []Member
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]Member, error)); ok {
		return rf(ctx, teamSlug)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []Member); ok {
		r0 = rf(ctx, teamSlug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Member)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, teamSlug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetTeamMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeamMembers'
type MockClient_GetTeamMembers_Call struct {
	*mock.Call
}

// GetTeamMembers is a helper method to define mock.On call
//   - ctx context.Context
//   - teamSlug string
func (_e *MockClient_Expecter) GetTeamMembers(ctx interface{}, teamSlug interface{}) *MockClient_GetTeamMembers_Call {
	return &MockClient_GetTeamMembers_Call{Call: _e.mock.On("GetTeamMembers", ctx, teamSlug)}
}

func (_c *MockClient_GetTeamMembers_Call) Run(run func(ctx context.Context, teamSlug string)) *MockClient_GetTeamMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClient_GetTeamMembers_Call) Return(_a0 []Member, _a1 error) *MockClient_GetTeamMembers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_GetTeamMembers_Call) RunAndReturn(run func(context.Context, string) ([]Member, error)) *MockClient_GetTeamMembers_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeams provides a mock function with given fields: ctx
func (_m *MockClient) GetTeams(ctx context.Context) ([]Team, error) {
	ret := _m.Called(ctx)

	var r0 []Team
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]Team, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []Team); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Team)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetTeams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeams'
type MockClient_GetTeams_Call struct {
	*mock.Call
}

// GetTeams is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockClient_Expecter) GetTeams(ctx interface{}) *MockClient_GetTeams_Call {
	return &MockClient_GetTeams_Call{Call: _e.mock.On("GetTeams", ctx)}
}

func (_c *MockClient_GetTeams_Call) Run(run func(ctx context.Context)) *MockClient_GetTeams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockClient_GetTeams_Call) Return(_a0 []Team, _a1 error) *MockClient_GetTeams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_GetTeams_Call) RunAndReturn(run func(context.Context) ([]Team, error)) *MockClient_GetTeams_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeamsForUser provides a mock function with given fields: ctx, email
func (_m *MockClient) GetTeamsForUser(ctx context.Context, email string) ([]TeamMembership, error) {
	ret := _m.Called(ctx, email)

	var r0 []TeamMembership
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]TeamMembership, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []TeamMembership); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]TeamMembership)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetTeamsForUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeamsForUser'
type MockClient_GetTeamsForUser_Call struct {
	*mock.Call
}

// GetTeamsForUser is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockClient_Expecter) GetTeamsForUser(ctx interface{}, email interface{}) *MockClient_GetTeamsForUser_Call {
	return &MockClient_GetTeamsForUser_Call{Call: _e.mock.On("GetTeamsForUser", ctx, email)}
}

func (_c *MockClient_GetTeamsForUser_Call) Run(run func(ctx context.Context, email string)) *MockClient_GetTeamsForUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClient_GetTeamsForUser_Call) Return(_a0 []TeamMembership, _a1 error) *MockClient_GetTeamsForUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_GetTeamsForUser_Call) RunAndReturn(run func(context.Context, string) ([]TeamMembership, error)) *MockClient_GetTeamsForUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function with given fields: ctx, email
func (_m *MockClient) GetUser(ctx context.Context, email string) (*User, error) {
	ret := _m.Called(ctx, email)

	var r0 *User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type MockClient_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockClient_Expecter) GetUser(ctx interface{}, email interface{}) *MockClient_GetUser_Call {
	return &MockClient_GetUser_Call{Call: _e.mock.On("GetUser", ctx, email)}
}

func (_c *MockClient_GetUser_Call) Run(run func(ctx context.Context, email string)) *MockClient_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClient_GetUser_Call) Return(_a0 *User, _a1 error) *MockClient_GetUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_GetUser_Call) RunAndReturn(run func(context.Context, string) (*User, error)) *MockClient_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByID provides a mock function with given fields: ctx, id
func (_m *MockClient) GetUserByID(ctx context.Context, id string) (*model.User, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByID'
type MockClient_GetUserByID_Call struct {
	*mock.Call
}

// GetUserByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockClient_Expecter) GetUserByID(ctx interface{}, id interface{}) *MockClient_GetUserByID_Call {
	return &MockClient_GetUserByID_Call{Call: _e.mock.On("GetUserByID", ctx, id)}
}

func (_c *MockClient_GetUserByID_Call) Run(run func(ctx context.Context, id string)) *MockClient_GetUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClient_GetUserByID_Call) Return(_a0 *model.User, _a1 error) *MockClient_GetUserByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_GetUserByID_Call) RunAndReturn(run func(context.Context, string) (*model.User, error)) *MockClient_GetUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// Search provides a mock function with given fields: ctx, query, filter
func (_m *MockClient) Search(ctx context.Context, query string, filter *model.SearchFilter) []*search.Result {
	ret := _m.Called(ctx, query, filter)

	var r0 []*search.Result
	if rf, ok := ret.Get(0).(func(context.Context, string, *model.SearchFilter) []*search.Result); ok {
		r0 = rf(ctx, query, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*search.Result)
		}
	}

	return r0
}

// MockClient_Search_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Search'
type MockClient_Search_Call struct {
	*mock.Call
}

// Search is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - filter *model.SearchFilter
func (_e *MockClient_Expecter) Search(ctx interface{}, query interface{}, filter interface{}) *MockClient_Search_Call {
	return &MockClient_Search_Call{Call: _e.mock.On("Search", ctx, query, filter)}
}

func (_c *MockClient_Search_Call) Run(run func(ctx context.Context, query string, filter *model.SearchFilter)) *MockClient_Search_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*model.SearchFilter))
	})
	return _c
}

func (_c *MockClient_Search_Call) Return(_a0 []*search.Result) *MockClient_Search_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_Search_Call) RunAndReturn(run func(context.Context, string, *model.SearchFilter) []*search.Result) *MockClient_Search_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
